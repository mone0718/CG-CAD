// vector Vinput x matrix M = vector Voutput
void mult(float[] Vi, float[][]M, float[]Vo) {
  Vo[0]=Vi[0]*M[0][0]+Vi[1]*M[1][0]+Vi[2]*M[2][0]+Vi[3]*M[3][0];
  Vo[1]=Vi[0]*M[0][1]+Vi[1]*M[1][1]+Vi[2]*M[2][1]+Vi[3]*M[3][1];
  Vo[2]=Vi[0]*M[0][2]+Vi[1]*M[1][2]+Vi[2]*M[2][2]+Vi[3]*M[3][2];
  Vo[3]=Vi[0]*M[0][3]+Vi[1]*M[1][3]+Vi[2]*M[2][3]+Vi[3]*M[3][3];
}

// matrix Ma x matrix Mb = matrix Moutput
void mult(float[][] Ma, float[][]Mb, float[][] Mo) {
  Mo[0][0]=Ma[0][0]*Mb[0][0]+Ma[0][1]*Mb[1][0]+Ma[0][2]*Mb[2][0]+Ma[0][3]*Mb[3][0];
  Mo[0][1]=Ma[0][0]*Mb[0][1]+Ma[0][1]*Mb[1][1]+Ma[0][2]*Mb[2][1]+Ma[0][3]*Mb[3][1];
  Mo[0][2]=Ma[0][0]*Mb[0][2]+Ma[0][1]*Mb[1][2]+Ma[0][2]*Mb[2][2]+Ma[0][3]*Mb[3][2];
  Mo[0][3]=Ma[0][0]*Mb[0][3]+Ma[0][1]*Mb[1][3]+Ma[0][2]*Mb[2][3]+Ma[0][3]*Mb[3][3];
  Mo[1][0]=Ma[1][0]*Mb[0][0]+Ma[1][1]*Mb[1][0]+Ma[1][2]*Mb[2][0]+Ma[1][3]*Mb[3][0];
  Mo[1][1]=Ma[1][0]*Mb[0][1]+Ma[1][1]*Mb[1][1]+Ma[1][2]*Mb[2][1]+Ma[1][3]*Mb[3][1];
  Mo[1][2]=Ma[1][0]*Mb[0][2]+Ma[1][1]*Mb[1][2]+Ma[1][2]*Mb[2][2]+Ma[1][3]*Mb[3][2];
  Mo[1][3]=Ma[1][0]*Mb[0][3]+Ma[1][1]*Mb[1][3]+Ma[1][2]*Mb[2][3]+Ma[1][3]*Mb[3][3];
  Mo[2][0]=Ma[2][0]*Mb[0][0]+Ma[2][1]*Mb[1][0]+Ma[2][2]*Mb[2][0]+Ma[2][3]*Mb[3][0];
  Mo[2][1]=Ma[2][0]*Mb[0][1]+Ma[2][1]*Mb[1][1]+Ma[2][2]*Mb[2][1]+Ma[2][3]*Mb[3][1];
  Mo[2][2]=Ma[2][0]*Mb[0][2]+Ma[2][1]*Mb[1][2]+Ma[2][2]*Mb[2][2]+Ma[2][3]*Mb[3][2];
  Mo[2][3]=Ma[2][0]*Mb[0][3]+Ma[2][1]*Mb[1][3]+Ma[2][2]*Mb[2][3]+Ma[2][3]*Mb[3][3];
  Mo[3][0]=Ma[3][0]*Mb[0][0]+Ma[3][1]*Mb[1][0]+Ma[3][2]*Mb[2][0]+Ma[3][3]*Mb[3][0];
  Mo[3][1]=Ma[3][0]*Mb[0][1]+Ma[3][1]*Mb[1][1]+Ma[3][2]*Mb[2][1]+Ma[3][3]*Mb[3][1];
  Mo[3][2]=Ma[3][0]*Mb[0][2]+Ma[3][1]*Mb[1][2]+Ma[3][2]*Mb[2][2]+Ma[3][3]*Mb[3][2];
  Mo[3][3]=Ma[3][0]*Mb[0][3]+Ma[3][1]*Mb[1][3]+Ma[3][2]*Mb[2][3]+Ma[3][3]*Mb[3][3];
}
